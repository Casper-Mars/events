// Code generated by protoc-gen-go-events. DO NOT EDIT.

package channel

import (
	context "context"
	events "events/events"
	proto "github.com/golang/protobuf/proto"
)

// EnterEventPublisher is an interface to publish EnterEvent event
type EnterEventPublisher interface {
	SendEvent(ctx context.Context, in *EnterEvent) error
}

// NewEnterEventPublisher create a publisher for EnterEvent event
func NewEnterEventPublisher(metadata events.PublishMetadata, sender events.Sender) EnterEventPublisher {
	return &enterEventPublisher{
		sender:   sender,
		metadata: metadata,
	}
}

// EnterEventSubscriber is an interface to subscribe to EnterEvent event
type EnterEventSubscriber interface {
	Receive(ctx context.Context, in *EnterEvent) error
}

// RegisterEnterEventSubscriber register a subscriber
func RegisterEnterEventSubscriber(server events.Subscriber, subReq events.SubRequest, srv EnterEventSubscriber) error {
	handler := &enterEventHandler{
		srv: srv,
	}
	return server.Subscribe(subReq, handler)
}

type enterEventPublisher struct {
	sender   events.Sender
	metadata events.PublishMetadata
}

func (b *enterEventPublisher) SendEvent(ctx context.Context, in *EnterEvent) error {
	data, err := proto.Marshal(in)
	if err != nil {
		return err
	}
	return b.sender.Send(ctx, events.Message{
		Data:  data,
		Topic: b.metadata.Topic,
	})
}

type enterEventHandler struct {
	srv EnterEventSubscriber
}

func (o *enterEventHandler) Handle(ctx context.Context, msg events.Message) error {
	event := &EnterEvent{}
	err := proto.Unmarshal(msg.Data, event)
	if err != nil {
		return err
	}
	return o.srv.Receive(ctx, event)
}
