// Code generated by protoc-gen-go-events. DO NOT EDIT.

package user

import (
	context "context"
	events "events/events"
	proto "github.com/golang/protobuf/proto"
)

// LoginEventPublisher is an interface to publish LoginEvent event
type LoginEventPublisher interface {
	SendEvent(ctx context.Context, in *LoginEvent) error
}

// NewLoginEventPublisher create a publisher for LoginEvent event
func NewLoginEventPublisher(metadata events.PublishMetadata, sender events.Sender) LoginEventPublisher {
	return &loginEventPublisher{
		sender:   sender,
		metadata: metadata,
	}
}

// LoginEventSubscriber is an interface to subscribe to LoginEvent event
type LoginEventSubscriber interface {
	Receive(ctx context.Context, in *LoginEvent) error
}

// RegisterLoginEventSubscriber register a subscriber
func RegisterLoginEventSubscriber(server events.Subscriber, subReq events.SubRequest, srv LoginEventSubscriber) error {
	handler := &loginEventHandler{
		srv: srv,
	}
	return server.Subscribe(subReq, handler)
}

type loginEventPublisher struct {
	sender   events.Sender
	metadata events.PublishMetadata
}

func (b *loginEventPublisher) SendEvent(ctx context.Context, in *LoginEvent) error {
	data, err := proto.Marshal(in)
	if err != nil {
		return err
	}
	return b.sender.Send(ctx, events.Message{
		Data:  data,
		Topic: b.metadata.Topic,
	})
}

type loginEventHandler struct {
	srv LoginEventSubscriber
}

func (o *loginEventHandler) Handle(ctx context.Context, msg events.Message) error {
	event := &LoginEvent{}
	err := proto.Unmarshal(msg.Data, event)
	if err != nil {
		return err
	}
	return o.srv.Receive(ctx, event)
}
