package main

import (
	"google.golang.org/protobuf/compiler/protogen"
	"log"
	"regexp"
)

const (
	eventPackage   = protogen.GoImportPath("events/events")
	protoPackage   = protogen.GoImportPath("github.com/golang/protobuf/proto")
	contextPackage = protogen.GoImportPath("context")
)

// generateFile generates a _events.pb.go file containing events definitions at events.proto.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	matchString, err := regexp.MatchString("events.proto$", file.Proto.GetName())
	if err != nil {
		log.Printf("Failed to match file name: %v\n", err)
		return nil
	}
	if !matchString {
		return nil
	}
	log.Printf("Generating events for %s", file.Proto.GetName())
	filename := file.GeneratedFilenamePrefix + "_events.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-events. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	if len(file.Messages) == 0 {
		g.P("// No events defined.")
		return g
	}
	generateFileContent(gen, file, g)
	return g
}

func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	g.QualifiedGoIdent(contextPackage.Ident(""))
	g.QualifiedGoIdent(protoPackage.Ident(""))
	g.QualifiedGoIdent(eventPackage.Ident(""))
	g.P()

	for _, msg := range file.Messages {
		pubSub := generatePubSub(gen, msg)
		g.P(pubSub)
	}
}

func generatePubSub(gen *protogen.Plugin, msg *protogen.Message) string {
	publisher := PubSubTemplate{
		Name: msg.GoIdent.GoName,
	}
	content := publisher.Exec()
	return content
}
