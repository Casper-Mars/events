// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SenderClient is the client API for Sender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SenderClient interface {
	SendEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type senderClient struct {
	cc grpc.ClientConnInterface
}

func NewSenderClient(cc grpc.ClientConnInterface) SenderClient {
	return &senderClient{cc}
}

func (c *senderClient) SendEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.Sender/SendEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SenderServer is the server API for Sender service.
// All implementations must embed UnimplementedSenderServer
// for forward compatibility
type SenderServer interface {
	SendEvent(context.Context, *Event) (*emptypb.Empty, error)
	mustEmbedUnimplementedSenderServer()
}

// UnimplementedSenderServer must be embedded to have forward compatible implementations.
type UnimplementedSenderServer struct {
}

func (UnimplementedSenderServer) SendEvent(context.Context, *Event) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEvent not implemented")
}
func (UnimplementedSenderServer) mustEmbedUnimplementedSenderServer() {}

// UnsafeSenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SenderServer will
// result in compilation errors.
type UnsafeSenderServer interface {
	mustEmbedUnimplementedSenderServer()
}

func RegisterSenderServer(s grpc.ServiceRegistrar, srv SenderServer) {
	s.RegisterService(&Sender_ServiceDesc, srv)
}

func _Sender_SendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SenderServer).SendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Sender/SendEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SenderServer).SendEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

// Sender_ServiceDesc is the grpc.ServiceDesc for Sender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Sender",
	HandlerType: (*SenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEvent",
			Handler:    _Sender_SendEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/order.proto",
}

// ReceiverClient is the client API for Receiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceiverClient interface {
	ReceiveEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type receiverClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiverClient(cc grpc.ClientConnInterface) ReceiverClient {
	return &receiverClient{cc}
}

func (c *receiverClient) ReceiveEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.Receiver/ReceiveEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiverServer is the server API for Receiver service.
// All implementations must embed UnimplementedReceiverServer
// for forward compatibility
type ReceiverServer interface {
	ReceiveEvent(context.Context, *Event) (*emptypb.Empty, error)
	mustEmbedUnimplementedReceiverServer()
}

// UnimplementedReceiverServer must be embedded to have forward compatible implementations.
type UnimplementedReceiverServer struct {
}

func (UnimplementedReceiverServer) ReceiveEvent(context.Context, *Event) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveEvent not implemented")
}
func (UnimplementedReceiverServer) mustEmbedUnimplementedReceiverServer() {}

// UnsafeReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiverServer will
// result in compilation errors.
type UnsafeReceiverServer interface {
	mustEmbedUnimplementedReceiverServer()
}

func RegisterReceiverServer(s grpc.ServiceRegistrar, srv ReceiverServer) {
	s.RegisterService(&Receiver_ServiceDesc, srv)
}

func _Receiver_ReceiveEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServer).ReceiveEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Receiver/ReceiveEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServer).ReceiveEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

// Receiver_ServiceDesc is the grpc.ServiceDesc for Receiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Receiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Receiver",
	HandlerType: (*ReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveEvent",
			Handler:    _Receiver_ReceiveEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/order.proto",
}

// BuyEventSenderClient is the client API for BuyEventSender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuyEventSenderClient interface {
	SendEvent(ctx context.Context, in *BuyEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type buyEventSenderClient struct {
	cc grpc.ClientConnInterface
}

func NewBuyEventSenderClient(cc grpc.ClientConnInterface) BuyEventSenderClient {
	return &buyEventSenderClient{cc}
}

func (c *buyEventSenderClient) SendEvent(ctx context.Context, in *BuyEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.BuyEventSender/SendEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuyEventSenderServer is the server API for BuyEventSender service.
// All implementations must embed UnimplementedBuyEventSenderServer
// for forward compatibility
type BuyEventSenderServer interface {
	SendEvent(context.Context, *BuyEvent) (*emptypb.Empty, error)
	mustEmbedUnimplementedBuyEventSenderServer()
}

// UnimplementedBuyEventSenderServer must be embedded to have forward compatible implementations.
type UnimplementedBuyEventSenderServer struct {
}

func (UnimplementedBuyEventSenderServer) SendEvent(context.Context, *BuyEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEvent not implemented")
}
func (UnimplementedBuyEventSenderServer) mustEmbedUnimplementedBuyEventSenderServer() {}

// UnsafeBuyEventSenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuyEventSenderServer will
// result in compilation errors.
type UnsafeBuyEventSenderServer interface {
	mustEmbedUnimplementedBuyEventSenderServer()
}

func RegisterBuyEventSenderServer(s grpc.ServiceRegistrar, srv BuyEventSenderServer) {
	s.RegisterService(&BuyEventSender_ServiceDesc, srv)
}

func _BuyEventSender_SendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyEventSenderServer).SendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BuyEventSender/SendEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyEventSenderServer).SendEvent(ctx, req.(*BuyEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// BuyEventSender_ServiceDesc is the grpc.ServiceDesc for BuyEventSender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuyEventSender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.BuyEventSender",
	HandlerType: (*BuyEventSenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEvent",
			Handler:    _BuyEventSender_SendEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/order.proto",
}

// BuyEventReceiverClient is the client API for BuyEventReceiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuyEventReceiverClient interface {
	ReceiveEvent(ctx context.Context, in *BuyEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type buyEventReceiverClient struct {
	cc grpc.ClientConnInterface
}

func NewBuyEventReceiverClient(cc grpc.ClientConnInterface) BuyEventReceiverClient {
	return &buyEventReceiverClient{cc}
}

func (c *buyEventReceiverClient) ReceiveEvent(ctx context.Context, in *BuyEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.BuyEventReceiver/ReceiveEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuyEventReceiverServer is the server API for BuyEventReceiver service.
// All implementations must embed UnimplementedBuyEventReceiverServer
// for forward compatibility
type BuyEventReceiverServer interface {
	ReceiveEvent(context.Context, *BuyEvent) (*emptypb.Empty, error)
	mustEmbedUnimplementedBuyEventReceiverServer()
}

// UnimplementedBuyEventReceiverServer must be embedded to have forward compatible implementations.
type UnimplementedBuyEventReceiverServer struct {
}

func (UnimplementedBuyEventReceiverServer) ReceiveEvent(context.Context, *BuyEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveEvent not implemented")
}
func (UnimplementedBuyEventReceiverServer) mustEmbedUnimplementedBuyEventReceiverServer() {}

// UnsafeBuyEventReceiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuyEventReceiverServer will
// result in compilation errors.
type UnsafeBuyEventReceiverServer interface {
	mustEmbedUnimplementedBuyEventReceiverServer()
}

func RegisterBuyEventReceiverServer(s grpc.ServiceRegistrar, srv BuyEventReceiverServer) {
	s.RegisterService(&BuyEventReceiver_ServiceDesc, srv)
}

func _BuyEventReceiver_ReceiveEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyEventReceiverServer).ReceiveEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BuyEventReceiver/ReceiveEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyEventReceiverServer).ReceiveEvent(ctx, req.(*BuyEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// BuyEventReceiver_ServiceDesc is the grpc.ServiceDesc for BuyEventReceiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuyEventReceiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.BuyEventReceiver",
	HandlerType: (*BuyEventReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveEvent",
			Handler:    _BuyEventReceiver_ReceiveEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/order.proto",
}
